"use client"

import { Header } from "@/components/header"
import { Footer } from "@/components/footer"
import { FallingLeaves } from "@/components/falling-leaves"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { useState, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { CheckCircle, XCircle, Brain, Trophy, RotateCcw, Clock, BookOpen } from "lucide-react"

const quizQuestions = [
    {
        id: 1,
        category: "Ti·ªÉu S·ª≠",
        question: "Kh·ªïng T·ª≠ sinh nƒÉm n√†o?",
        options: ["551 TCN", "549 TCN", "553 TCN", "547 TCN"],
        correct: 0,
        explanation: "Kh·ªïng T·ª≠ sinh ng√†y 28 th√°ng 9 nƒÉm 551 TCN t·∫°i ·∫•p Tr√¢u, th√¥n X∆∞∆°ng B√¨nh, n∆∞·ªõc L·ªó.",
        difficulty: "D·ªÖ"
    },
    {
        id: 2,
        category: "Tri·∫øt H·ªçc",
        question: "ƒê·ª©c t√≠nh n√†o ƒë∆∞·ª£c Kh·ªïng T·ª≠ coi l√† quan tr·ªçng nh·∫•t?",
        options: ["Tr√≠ (Êô∫)", "Nh√¢n (‰ªÅ)", "L·ªÖ (Á§º)", "Nghƒ©a (‰πâ)"],
        correct: 1,
        explanation: "Nh√¢n (‰ªÅ) - l√≤ng nh√¢n √°i l√† ƒë·ª©c t√≠nh cao nh·∫•t trong t∆∞ t∆∞·ªüng Kh·ªïng T·ª≠, l√† n·ªÅn t·∫£ng c·ªßa m·ªçi ƒë·ª©c t√≠nh kh√°c.",
        difficulty: "Trung b√¨nh"
    },
    {
        id: 3,
        category: "Gi√°o L√Ω",
        question: "C√¢u n√†o sau ƒë√¢y l√† l·ªùi d·∫°y c·ªßa Kh·ªïng T·ª≠?",
        options: [
            "H·ªçc m√† kh√¥ng t∆∞ th√¨ m·ªù m·ªãt",
            "Tri k·ª∑ nan t·∫ßm",
            "Th·∫Øng nh√¢n ti√™n th·∫Øng k·ª∑",
            "B·∫•t nh·∫≠p h·ªï huy·ªát y√™n ƒë·∫Øc h·ªï t·ª≠"
        ],
        correct: 0,
        explanation: "\"Â≠∏ËÄå‰∏çÊÄùÂâáÁΩîÔºåÊÄùËÄå‰∏çÂ≠∏ÂâáÊÆÜ\" - H·ªçc m√† kh√¥ng t∆∞ th√¨ m·ªù m·ªãt, t∆∞ m√† kh√¥ng h·ªçc th√¨ nguy hi·ªÉm.",
        difficulty: "Trung b√¨nh"
    },
    {
        id: 4,
        category: "T√°c Ph·∫©m",
        question: "B·ªô Ng≈© Kinh do Kh·ªïng T·ª≠ bi√™n so·∫°n g·ªìm bao nhi·ªÅu cu·ªën s√°ch?",
        options: ["4 cu·ªën", "5 cu·ªën", "6 cu·ªën", "7 cu·ªën"],
        correct: 1,
        explanation: "Ng≈© Kinh g·ªìm 5 cu·ªën: Kinh Thi, Kinh Th∆∞, Kinh L·ªÖ, Kinh D·ªãch v√† Kinh Xu√¢n Thu.",
        difficulty: "D·ªÖ"
    },
    {
        id: 5,
        category: "Ti·ªÉu S·ª≠",
        question: "T√™n th·∫≠t c·ªßa Kh·ªïng T·ª≠ l√† g√¨?",
        options: ["Kh·ªïng Kh√¢u", "Kh·ªïng Ni", "Kh·ªïng Phu", "Kh·ªïng T·ª≠"],
        correct: 0,
        explanation: "T√™n th·∫≠t l√† Kh·ªïng Kh√¢u (Â≠î‰∏ò), t·ª± l√† Tr·ªçng Ni (‰ª≤Â∞º).",
        difficulty: "Trung b√¨nh"
    },
    {
        id: 6,
        category: "Tri·∫øt H·ªçc",
        question: "Nguy√™n t·∫Øc v√†ng c·ªßa Kh·ªïng T·ª≠ l√† g√¨?",
        options: [
            "C√≥ c√¥ng m√†i s·∫Øt c√≥ ng√†y n√™n kim",
            "ƒê·ª´ng l√†m ƒëi·ªÅu g√¨ m√† b·∫°n kh√¥ng mu·ªën ng∆∞·ªùi kh√°c l√†m cho m√¨nh",
            "H·ªçc t·∫≠p su·ªët ƒë·ªùi",
            "Qu√¢n t·ª≠ t·ª± c∆∞·ªùng b·∫•t t·ª©c"
        ],
        correct: 1,
        explanation: "\"Â∑±ÊâÄ‰∏çÊ¨≤ÔºåÂãøÊñΩÊñº‰∫∫\" - ƒê·ª´ng l√†m ƒëi·ªÅu g√¨ m√† b·∫°n kh√¥ng mu·ªën ng∆∞·ªùi kh√°c l√†m cho m√¨nh.",
        difficulty: "D·ªÖ"
    },
    {
        id: 7,
        category: "Gi√°o D·ª•c",
        question: "Kh·ªïng T·ª≠ ƒë·ªÅ x∆∞·ªõng ph∆∞∆°ng ch√¢m gi√°o d·ª•c n√†o?",
        options: ["C√≥ gi√°o kh√¥ng lo·∫°i", "H·ªçc t·∫≠p su·ªët ƒë·ªùi", "T·ª± h·ªçc t·ª± l√†m", "Th·∫ßy nghi√™m tr√≤ gi·ªèi"],
        correct: 0,
        explanation: "\"ÊúâÊïôÁÑ°È°û\" - C√≥ gi√°o kh√¥ng lo·∫°i, nghƒ©a l√† gi√°o d·ª•c cho m·ªçi ng∆∞·ªùi kh√¥ng ph√¢n bi·ªát xu·∫•t th√¢n.",
        difficulty: "Trung b√¨nh"
    },
    {
        id: 8,
        category: "Ti·ªÉu S·ª≠",
        question: "Kh·ªïng T·ª≠ qua ƒë·ªùi ·ªü tu·ªïi bao nhi√™u?",
        options: ["71 tu·ªïi", "73 tu·ªïi", "69 tu·ªïi", "75 tu·ªïi"],
        correct: 0,
        explanation: "Kh·ªïng T·ª≠ qua ƒë·ªùi nƒÉm 479 TCN ·ªü tu·ªïi 71, t·∫°i qu√™ h∆∞∆°ng n∆∞·ªõc L·ªó.",
        difficulty: "Trung b√¨nh"
    },
    {
        id: 9,
        category: "Tri·∫øt H·ªçc",
        question: "Theo Kh·ªïng T·ª≠, m·ªôt ng∆∞·ªùi qu√¢n t·ª≠ c·∫ßn c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?",
        options: ["Gi√†u c√≥ v√† quy·ªÅn l·ª±c", "ƒê·∫°o ƒë·ª©c v√† h·ªçc th·ª©c", "N·ªïi ti·∫øng v√† th√†nh ƒë·∫°t", "Kh·ªèe m·∫°nh v√† th√¥ng minh"],
        correct: 1,
        explanation: "Qu√¢n t·ª≠ trong t∆∞ t∆∞·ªüng Kh·ªïng T·ª≠ l√† ng∆∞·ªùi c√≥ ƒë·∫°o ƒë·ª©c cao th∆∞∆°ng, c√≥ h·ªçc th·ª©c v√† lu√¥n tu d∆∞·ª°ng b·∫£n th√¢n.",
        difficulty: "Kh√≥"
    },
    {
        id: 10,
        category: "Gi√°o L√Ω",
        question: "\"‰∏â‰∫∫Ë°åÔºåÂøÖÊúâÊàëÂ∏´ÁÑâ\" c√≥ nghƒ©a l√† g√¨?",
        options: [
            "Ba ng∆∞·ªùi ƒëi c√πng nhau r·∫•t vui",
            "Ba ng∆∞·ªùi ƒëi, nh·∫•t ƒë·ªãnh c√≥ ng∆∞·ªùi l√†m th·∫ßy ta",
            "Ba ng∆∞·ªùi c√πng l√†m vi·ªác s·∫Ω th√†nh c√¥ng",
            "Ba ng∆∞·ªùi b·∫°n th√¢n nh∆∞ anh em"
        ],
        correct: 1,
        explanation: "C√¢u n√†y th·ªÉ hi·ªán tinh th·∫ßn khi√™m t·ªën v√† lu√¥n h·ªçc h·ªèi t·ª´ m·ªçi ng∆∞·ªùi xung quanh.",
        difficulty: "D·ªÖ"
    },
    {
        id: 11,
        category: "L·ªãch S·ª≠",
        question: "Kh·ªïng T·ª≠ b·∫Øt ƒë·∫ßu chu du c√°c n∆∞·ªõc ·ªü tu·ªïi n√†o?",
        options: ["50 tu·ªïi", "55 tu·ªïi", "60 tu·ªïi", "45 tu·ªïi"],
        correct: 1,
        explanation: "Kh·ªïng T·ª≠ b·∫Øt ƒë·∫ßu cu·ªôc chu du 14 nƒÉm ·ªü tu·ªïi 55 ƒë·ªÉ truy·ªÅn b√° t∆∞ t∆∞·ªüng c·ªßa m√¨nh.",
        difficulty: "Kh√≥"
    },
    {
        id: 12,
        category: "Tri·∫øt H·ªçc",
        question: "Trong Ng≈© ƒê·ª©c c·ªßa Kh·ªïng T·ª≠, ƒë·ª©c t√≠nh n√†o ƒë·∫°i di·ªán cho l√≤ng tin?",
        options: ["T√≠n (‰ø°)", "Nghƒ©a (‰πâ)", "Tr√≠ (Êô∫)", "L·ªÖ (Á§º)"],
        correct: 0,
        explanation: "T√≠n (‰ø°) ƒë·∫°i di·ªán cho l√≤ng tin, s·ª± th√†nh th·∫≠t v√† vi·ªác gi·ªØ l·ªùi h·ª©a.",
        difficulty: "Trung b√¨nh"
    }
]

const categoryColors = {
    "Ti·ªÉu S·ª≠": { bg: "bg-blue-100", text: "text-blue-800", border: "border-blue-200" },
    "Tri·∫øt H·ªçc": { bg: "bg-purple-100", text: "text-purple-800", border: "border-purple-200" },
    "Gi√°o L√Ω": { bg: "bg-green-100", text: "text-green-800", border: "border-green-200" },
    "T√°c Ph·∫©m": { bg: "bg-amber-100", text: "text-amber-800", border: "border-amber-200" },
    "Gi√°o D·ª•c": { bg: "bg-cyan-100", text: "text-cyan-800", border: "border-cyan-200" },
    "L·ªãch S·ª≠": { bg: "bg-red-100", text: "text-red-800", border: "border-red-200" }
}

const difficultyColors = {
    "D·ªÖ": { bg: "bg-green-100", text: "text-green-700" },
    "Trung b√¨nh": { bg: "bg-yellow-100", text: "text-yellow-700" },
    "Kh√≥": { bg: "bg-red-100", text: "text-red-700" }
}

export default function QuizPage() {
    const [currentQuestion, setCurrentQuestion] = useState(0)
    const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null)
    const [showResult, setShowResult] = useState(false)
    const [score, setScore] = useState(0)
    const [answers, setAnswers] = useState<boolean[]>([])
    const [quizCompleted, setQuizCompleted] = useState(false)
    const [timeLeft, setTimeLeft] = useState(30) // 30 seconds per question
    const [quizStarted, setQuizStarted] = useState(false)

    // Timer effect
    useEffect(() => {
        if (quizStarted && !quizCompleted && !showResult && timeLeft > 0) {
            const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000)
            return () => clearTimeout(timer)
        } else if (timeLeft === 0 && !showResult) {
            handleTimeUp()
        }
    }, [timeLeft, quizStarted, quizCompleted, showResult])

    const handleTimeUp = () => {
        setSelectedAnswer(null)
        setShowResult(true)
        const newAnswers = [...answers]
        newAnswers[currentQuestion] = false
        setAnswers(newAnswers)
    }

    const handleAnswerSelect = (answerIndex: number) => {
        if (showResult) return
        setSelectedAnswer(answerIndex)
    }

    const handleSubmitAnswer = () => {
        if (selectedAnswer === null) return

        const isCorrect = selectedAnswer === quizQuestions[currentQuestion].correct
        const newAnswers = [...answers]
        newAnswers[currentQuestion] = isCorrect
        setAnswers(newAnswers)

        if (isCorrect) {
            setScore(score + 1)
        }

        setShowResult(true)
    }

    const handleNextQuestion = () => {
        if (currentQuestion < quizQuestions.length - 1) {
            setCurrentQuestion(currentQuestion + 1)
            setSelectedAnswer(null)
            setShowResult(false)
            setTimeLeft(30)
        } else {
            setQuizCompleted(true)
        }
    }

    const handleRestartQuiz = () => {
        setCurrentQuestion(0)
        setSelectedAnswer(null)
        setShowResult(false)
        setScore(0)
        setAnswers([])
        setQuizCompleted(false)
        setTimeLeft(30)
        setQuizStarted(false)
    }

    const getScoreMessage = () => {
        const percentage = (score / quizQuestions.length) * 100
        if (percentage >= 90) return { message: "Xu·∫•t s·∫Øc! B·∫°n l√† chuy√™n gia v·ªÅ Kh·ªïng T·ª≠!", emoji: "üéâ", color: "text-green-600" }
        if (percentage >= 70) return { message: "R·∫•t t·ªët! B·∫°n hi·ªÉu kh√° nhi·ªÅu v·ªÅ Kh·ªïng T·ª≠", emoji: "üéä", color: "text-blue-600" }
        if (percentage >= 50) return { message: "Kh√° ·ªïn! B·∫°n c·∫ßn t√¨m hi·ªÉu th√™m v·ªÅ Kh·ªïng T·ª≠", emoji: "üìö", color: "text-yellow-600" }
        return { message: "H√£y h·ªçc th√™m v·ªÅ v·ªã th√°nh nh√¢n n√†y nh√©!", emoji: "üìñ", color: "text-red-600" }
    }

    if (!quizStarted) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-amber-50 via-white to-cyan-50">
                <FallingLeaves />
                <Header />

                <main className="pt-20">
                    {/* Hero Section */}
                    <section className="py-20 px-4 relative overflow-hidden">
                        <div className="absolute inset-0 bg-[url('/images/tranquil-chinese-landscape-with-mountains-and-trad.jpg')] bg-cover bg-center opacity-10"></div>

                        {/* Floating Chinese Characters */}
                        <div className="absolute inset-0 pointer-events-none">
                            {["Êô∫", "‰ªÅ", "Á§º", "‰πâ", "‰ø°"].map((char, index) => (
                                <motion.div
                                    key={index}
                                    className="absolute text-6xl font-bold opacity-5 text-primary"
                                    style={{
                                        left: `${15 + index * 18}%`,
                                        top: `${25 + (index % 2) * 35}%`
                                    }}
                                    animate={{
                                        y: [0, -25, 0],
                                        rotate: [0, 3, -3, 0],
                                        scale: [1, 1.1, 1],
                                    }}
                                    transition={{
                                        duration: 6 + index,
                                        repeat: Infinity,
                                        ease: "easeInOut",
                                        delay: index * 0.5,
                                    }}
                                >
                                    {char}
                                </motion.div>
                            ))}
                        </div>

                        <div className="max-w-4xl mx-auto text-center relative z-10">
                            <motion.div
                                initial={{ opacity: 0, y: 50 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ duration: 0.8 }}
                            >
                                <Badge className="mb-6 text-lg px-6 py-2 bg-amber-100 text-amber-800 border-amber-300">
                                    <Brain className="w-5 h-5 mr-2" />
                                    Tr·∫Øc Nghi·ªám
                                </Badge>

                                <motion.h1
                                    className="text-5xl md:text-7xl font-bold text-foreground mb-6 text-balance"
                                    initial={{ scale: 0.9, opacity: 0 }}
                                    animate={{ scale: 1, opacity: 1 }}
                                    transition={{ delay: 0.2, duration: 0.8 }}
                                >
                                    Quiz Kh·ªïng T·ª≠
                                </motion.h1>

                                <motion.p
                                    className="text-xl md:text-2xl text-muted-foreground mb-12 text-pretty"
                                    initial={{ y: 30, opacity: 0 }}
                                    animate={{ y: 0, opacity: 1 }}
                                    transition={{ delay: 0.4, duration: 0.8 }}
                                >
                                    Ki·ªÉm tra ki·∫øn th·ª©c c·ªßa b·∫°n v·ªÅ Kh·ªïng T·ª≠ v√† t∆∞ t∆∞·ªüng Nho gi√°o
                                </motion.p>
                            </motion.div>

                            {/* Quiz Info Cards */}
                            <motion.div
                                className="grid md:grid-cols-3 gap-6 mb-12"
                                initial={{ opacity: 0, y: 30 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: 0.6, duration: 0.8 }}
                            >
                                <Card className="bg-white/80 backdrop-blur-sm border-2 border-blue-200 hover:border-blue-300 transition-colors">
                                    <CardContent className="p-6 text-center">
                                        <BookOpen className="w-8 h-8 text-blue-600 mx-auto mb-3" />
                                        <h3 className="font-semibold text-foreground mb-2">{quizQuestions.length} C√¢u H·ªèi</h3>
                                        <p className="text-sm text-muted-foreground">ƒêa d·∫°ng ch·ªß ƒë·ªÅ v·ªÅ Kh·ªïng T·ª≠</p>
                                    </CardContent>
                                </Card>

                                <Card className="bg-white/80 backdrop-blur-sm border-2 border-amber-200 hover:border-amber-300 transition-colors">
                                    <CardContent className="p-6 text-center">
                                        <Clock className="w-8 h-8 text-amber-600 mx-auto mb-3" />
                                        <h3 className="font-semibold text-foreground mb-2">30 Gi√¢y/C√¢u</h3>
                                        <p className="text-sm text-muted-foreground">Th·ª≠ th√°ch t·ªëc ƒë·ªô t∆∞ duy</p>
                                    </CardContent>
                                </Card>

                                <Card className="bg-white/80 backdrop-blur-sm border-2 border-green-200 hover:border-green-300 transition-colors">
                                    <CardContent className="p-6 text-center">
                                        <Trophy className="w-8 h-8 text-green-600 mx-auto mb-3" />
                                        <h3 className="font-semibold text-foreground mb-2">Nhi·ªÅu C·∫•p ƒê·ªô</h3>
                                        <p className="text-sm text-muted-foreground">T·ª´ d·ªÖ ƒë·∫øn kh√≥</p>
                                    </CardContent>
                                </Card>
                            </motion.div>

                            <motion.div
                                initial={{ opacity: 0, scale: 0.9 }}
                                animate={{ opacity: 1, scale: 1 }}
                                transition={{ delay: 0.8, duration: 0.6 }}
                            >
                                <Button
                                    size="lg"
                                    onClick={() => setQuizStarted(true)}
                                    className="bg-primary hover:bg-primary/90 text-primary-foreground px-12 py-4 text-xl transform hover:scale-105 transition-all duration-300"
                                >
                                    B·∫Øt ƒê·∫ßu Quiz
                                </Button>
                            </motion.div>
                        </div>
                    </section>
                </main>

                <Footer />
            </div>
        )
    }

    if (quizCompleted) {
        const scoreData = getScoreMessage()
        return (
            <div className="min-h-screen bg-gradient-to-br from-amber-50 via-white to-cyan-50">
                <FallingLeaves />
                <Header />

                <main className="pt-20">
                    <section className="py-20 px-4">
                        <div className="max-w-4xl mx-auto text-center">
                            <motion.div
                                initial={{ opacity: 0, scale: 0.8 }}
                                animate={{ opacity: 1, scale: 1 }}
                                transition={{ duration: 0.8 }}
                                className="bg-white/80 backdrop-blur-sm rounded-3xl p-12 border-2 border-primary/20 shadow-2xl"
                            >
                                <motion.div
                                    initial={{ y: -20, opacity: 0 }}
                                    animate={{ y: 0, opacity: 1 }}
                                    transition={{ delay: 0.2, duration: 0.6 }}
                                    className="text-8xl mb-6"
                                >
                                    {scoreData.emoji}
                                </motion.div>

                                <motion.h1
                                    className="text-4xl font-bold text-foreground mb-4"
                                    initial={{ y: 20, opacity: 0 }}
                                    animate={{ y: 0, opacity: 1 }}
                                    transition={{ delay: 0.3, duration: 0.6 }}
                                >
                                    Quiz Ho√†n Th√†nh!
                                </motion.h1>

                                <motion.div
                                    className="text-6xl font-bold mb-6"
                                    initial={{ scale: 0 }}
                                    animate={{ scale: 1 }}
                                    transition={{ delay: 0.4, duration: 0.8, type: "spring" }}
                                >
                                    <span className="text-primary">{score}</span>
                                    <span className="text-muted-foreground">/{quizQuestions.length}</span>
                                </motion.div>

                                <motion.p
                                    className={`text-xl font-medium mb-8 ${scoreData.color}`}
                                    initial={{ y: 20, opacity: 0 }}
                                    animate={{ y: 0, opacity: 1 }}
                                    transition={{ delay: 0.5, duration: 0.6 }}
                                >
                                    {scoreData.message}
                                </motion.p>

                                {/* Score Breakdown */}
                                <motion.div
                                    className="grid md:grid-cols-3 gap-4 mb-8"
                                    initial={{ y: 30, opacity: 0 }}
                                    animate={{ y: 0, opacity: 1 }}
                                    transition={{ delay: 0.6, duration: 0.6 }}
                                >
                                    <div className="bg-green-50 rounded-lg p-4 border border-green-200">
                                        <div className="text-2xl font-bold text-green-600">{score}</div>
                                        <div className="text-sm text-green-700">C√¢u ƒë√∫ng</div>
                                    </div>
                                    <div className="bg-red-50 rounded-lg p-4 border border-red-200">
                                        <div className="text-2xl font-bold text-red-600">{quizQuestions.length - score}</div>
                                        <div className="text-sm text-red-700">C√¢u sai</div>
                                    </div>
                                    <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
                                        <div className="text-2xl font-bold text-blue-600">{Math.round((score / quizQuestions.length) * 100)}%</div>
                                        <div className="text-sm text-blue-700">T·ª∑ l·ªá ƒë√∫ng</div>
                                    </div>
                                </motion.div>

                                <motion.div
                                    className="flex flex-col sm:flex-row gap-4 justify-center"
                                    initial={{ y: 30, opacity: 0 }}
                                    animate={{ y: 0, opacity: 1 }}
                                    transition={{ delay: 0.7, duration: 0.6 }}
                                >
                                    <Button
                                        onClick={handleRestartQuiz}
                                        size="lg"
                                        className="px-8 py-3 text-lg"
                                    >
                                        <RotateCcw className="w-5 h-5 mr-2" />
                                        L√†m L·∫°i Quiz
                                    </Button>
                                    <Button
                                        variant="outline"
                                        size="lg"
                                        onClick={() => window.location.href = '/'}
                                        className="px-8 py-3 text-lg"
                                    >
                                        V·ªÅ Trang Ch·ªß
                                    </Button>
                                </motion.div>
                            </motion.div>
                        </div>
                    </section>
                </main>

                <Footer />
            </div>
        )
    }

    const question = quizQuestions[currentQuestion]
    const categoryStyle = categoryColors[question.category as keyof typeof categoryColors]
    const difficultyStyle = difficultyColors[question.difficulty as keyof typeof difficultyColors]

    return (
        <div className="min-h-screen bg-gradient-to-br from-amber-50 via-white to-cyan-50">
            <FallingLeaves />
            <Header />

            <main className="pt-20">
                <section className="py-20 px-4">
                    <div className="max-w-4xl mx-auto">
                        {/* Progress Bar */}
                        <motion.div
                            className="mb-8"
                            initial={{ opacity: 0, y: -20 }}
                            animate={{ opacity: 1, y: 0 }}
                        >
                            <div className="flex justify-between items-center mb-2">
                                <span className="text-sm font-medium text-muted-foreground">
                                    C√¢u {currentQuestion + 1} / {quizQuestions.length}
                                </span>
                                <span className="text-sm font-medium text-muted-foreground">
                                    ƒêi·ªÉm: {score}
                                </span>
                            </div>
                            <Progress
                                value={((currentQuestion) / quizQuestions.length) * 100}
                                className="h-2"
                            />
                        </motion.div>

                        {/* Question Card */}
                        <motion.div
                            key={currentQuestion}
                            initial={{ opacity: 0, x: 50 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ duration: 0.5 }}
                        >
                            <Card className="bg-white/80 backdrop-blur-sm border-2 border-primary/20 shadow-2xl">
                                <CardHeader>
                                    {/* Category and Difficulty Badges */}
                                    <div className="flex justify-between items-center mb-4">
                                        <Badge className={`${categoryStyle?.bg} ${categoryStyle?.text} border-0`}>
                                            {question.category}
                                        </Badge>
                                        <div className="flex items-center gap-2">
                                            <Badge className={`${difficultyStyle?.bg} ${difficultyStyle?.text} border-0`}>
                                                {question.difficulty}
                                            </Badge>
                                            {!showResult && (
                                                <div className="flex items-center gap-2 bg-red-100 text-red-700 px-3 py-1 rounded-full">
                                                    <Clock className="w-4 h-4" />
                                                    <span className="font-mono">{timeLeft}s</span>
                                                </div>
                                            )}
                                        </div>
                                    </div>

                                    <CardTitle className="text-2xl font-bold text-foreground text-balance">
                                        {question.question}
                                    </CardTitle>
                                </CardHeader>

                                <CardContent>
                                    {/* Options */}
                                    <div className="space-y-3 mb-6">
                                        <AnimatePresence>
                                            {question.options.map((option, index) => {
                                                let buttonStyle = "bg-white border-2 border-border hover:border-primary/50 text-foreground"

                                                if (showResult) {
                                                    if (index === question.correct) {
                                                        buttonStyle = "bg-green-100 border-2 border-green-500 text-green-800"
                                                    } else if (index === selectedAnswer && selectedAnswer !== question.correct) {
                                                        buttonStyle = "bg-red-100 border-2 border-red-500 text-red-800"
                                                    }
                                                } else if (selectedAnswer === index) {
                                                    buttonStyle = "bg-primary/10 border-2 border-primary text-foreground"
                                                }

                                                return (
                                                    <motion.button
                                                        key={index}
                                                        className={`w-full p-4 rounded-lg text-left font-medium transition-all duration-200 ${buttonStyle}`}
                                                        onClick={() => handleAnswerSelect(index)}
                                                        disabled={showResult}
                                                        initial={{ opacity: 0, x: -20 }}
                                                        animate={{ opacity: 1, x: 0 }}
                                                        transition={{ delay: index * 0.1 }}
                                                        whileHover={!showResult ? { scale: 1.02 } : {}}
                                                        whileTap={!showResult ? { scale: 0.98 } : {}}
                                                    >
                                                        <div className="flex items-center justify-between">
                                                            <span>{option}</span>
                                                            {showResult && (
                                                                <div>
                                                                    {index === question.correct && (
                                                                        <CheckCircle className="w-5 h-5 text-green-600" />
                                                                    )}
                                                                    {index === selectedAnswer && selectedAnswer !== question.correct && (
                                                                        <XCircle className="w-5 h-5 text-red-600" />
                                                                    )}
                                                                </div>
                                                            )}
                                                        </div>
                                                    </motion.button>
                                                )
                                            })}
                                        </AnimatePresence>
                                    </div>

                                    {/* Explanation */}
                                    <AnimatePresence>
                                        {showResult && (
                                            <motion.div
                                                initial={{ opacity: 0, height: 0 }}
                                                animate={{ opacity: 1, height: "auto" }}
                                                exit={{ opacity: 0, height: 0 }}
                                                transition={{ duration: 0.3 }}
                                                className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6"
                                            >
                                                <h4 className="font-semibold text-blue-800 mb-2">Gi·∫£i th√≠ch:</h4>
                                                <p className="text-blue-700">{question.explanation}</p>
                                            </motion.div>
                                        )}
                                    </AnimatePresence>

                                    {/* Action Buttons */}
                                    <div className="flex justify-between">
                                        {!showResult ? (
                                            <Button
                                                onClick={handleSubmitAnswer}
                                                disabled={selectedAnswer === null}
                                                className="px-8 py-2"
                                                size="lg"
                                            >
                                                X√°c Nh·∫≠n
                                            </Button>
                                        ) : (
                                            <Button
                                                onClick={handleNextQuestion}
                                                className="px-8 py-2"
                                                size="lg"
                                            >
                                                {currentQuestion < quizQuestions.length - 1 ? "C√¢u Ti·∫øp Theo" : "Xem K·∫øt Qu·∫£"}
                                            </Button>
                                        )}

                                        <Button
                                            variant="outline"
                                            onClick={handleRestartQuiz}
                                            className="px-8 py-2"
                                            size="lg"
                                        >
                                            <RotateCcw className="w-4 h-4 mr-2" />
                                            B·∫Øt ƒê·∫ßu L·∫°i
                                        </Button>
                                    </div>
                                </CardContent>
                            </Card>
                        </motion.div>
                    </div>
                </section>
            </main>

            <Footer />
        </div>
    )
}